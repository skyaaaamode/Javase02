import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.Stack;public class BinTree {    public static class Node{        public Node left;        public Node right;        public int data;        public Node(int data){            this.data=data;        }    }    public List<Node> datas;    public Node head;    public BinTree(int[] arr){        datas=new ArrayList<Node>();        for (int i:arr){            datas.add(new Node(i));        }        for(int i=0;i<arr.length/2;i++){            datas.get(i).left=(i*2+1)<arr.length?datas.get(i*2+1):null;            datas.get(i).right=(i*2+2)<arr.length?datas.get(i*2+2):null;        }        head=datas.get(0);    }    public void preorder(Node head){        if(head!=null){            System.out.print(head.data+" ");            preorder(head.left);            preorder(head.right);        }    }    /**     * 非递归版本     * @param head     */    public void preorder01(Node head){        Stack<Node> nodes = new Stack<>();        if(head!=null){           nodes.push(head);           while (!nodes.isEmpty()){               Node pop = nodes.pop();               System.out.println(pop.data+" ");               if(pop.right!=null){                   nodes.push(pop.right);               }               if(pop.left!=null){                   nodes.push(pop.left);               }           }        }    }    public void midorder(Node head){        if(head!=null){            midorder(head.left);            System.out.print(head.data+" ");            midorder(head.right);        }    }    public void midorder02(Node head){        if(head!=null){            Stack<Node> nodes = new Stack<>();            while (!nodes.isEmpty()||head!=null){                if(head!=null){                    nodes.push(head);                    head=head.left;                }                else {                    head=nodes.pop();                    System.out.println(head.data+" ");                    head=head.right;                }            }        }    }    public void afterorder(Node head){        if(head!=null){            afterorder(head.left);            afterorder(head.right);            System.out.print(head.data+" ");        }    }    public void afterorder02(Node head){        if(head!=null){            Stack<Node> nodes = new Stack<>();            Stack<Node> nodes02 = new Stack<>();            nodes.push(head);            while (!nodes.isEmpty()){                Node pop = nodes.pop();                nodes02.push(pop);                if(pop.left!=null){                    nodes.push(pop.left);                }                if(pop.right !=null){                    nodes.push(pop.right);                }            }            while (!nodes02.isEmpty()){                System.out.println(nodes.pop().data);            }        }    }    public static void main(String[] args) {        int[] test={1,2,3,4,5,6,7,8};        BinTree binTree = new BinTree(test);        binTree.preorder(binTree.head);        System.out.println();        binTree.midorder(binTree.head);        System.out.println();        binTree.afterorder(binTree.head);        new LinkedList<>();    }}